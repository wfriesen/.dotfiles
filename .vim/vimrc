execute pathogen#infect()

syntax on
filetype plugin indent on

set background=dark
colorscheme solarized

set tabstop=2
set softtabstop=0
set expandtab
set shiftwidth=2
set smarttab
set autoindent

set encoding=utf-8

set number
set relativenumber
set cursorline

set laststatus=2
set hidden
set incsearch

set wildmenu

nnoremap <Space> <Nop>
let mapleader = "\<Space>"

highlight LineNr guifg=#586e75 ctermfg=10
highlight CursorLineNr guifg=#839496 ctermfg=12
highlight Cursor guibg=#dc322f

set ignorecase
set smartcase
set backupcopy=yes
set showmode

set wildignore+=*/node_modules/*
set wildignore+=*/$tf/*

nmap <silent> <leader>nt :NERDTreeToggle<CR>
nmap <silent> <leader>ut :UndotreeToggle<CR>:UndotreeFocus<CR>

nmap <silent> <C-Tab> :tabnext<CR>
nmap <silent> <C-S-Tab> :tabprevious<CR>
nmap <silent> <C-F4> :tabclose<CR>
nmap <silent> <leader>k :tabnext<CR>
nmap <silent> <leader>j :tabprevious<CR>

" Change order to put variables at the top, since that's usually where they are
" defined anyway
let g:tagbar_type_sql = {
    \ 'kinds' : [
        \ 'P:packages:1',
        \ 'v:variables',
        \ 'd:prototypes',
        \ 'c:cursors',
        \ 'f:functions',
        \ 'F:record fields',
        \ 'L:block label',
        \ 'p:procedures',
        \ 's:subtypes',
        \ 't:tables',
        \ 'T:triggers',
        \ 'i:indexes',
        \ 'e:events',
        \ 'U:publications',
        \ 'R:services',
        \ 'D:domains',
        \ 'V:views',
        \ 'n:synonyms',
        \ 'x:MobiLink Table Scripts',
        \ 'y:MobiLink Conn Scripts',
        \ 'z:MobiLink Properties',
    \ ],
\ }
let g:tagbar_compact=1
let g:tagbar_autofocus=1
" Sort by file position, not alphabetically
let g:tagbar_sort=0
let g:tagbar_width=30
nmap <silent> <C-t> :TagbarToggle<CR>

nmap [c <Plug>GitGutterPrevHunk
nmap ]c <Plug>GitGutterNextHunk

let g:NERDTreeWinSize=30
" Change vim cwd when changing NERDTree root
let g:NERDTreeChDirMode=2
" Don't show the 'Bookmarks' or 'Press ? for help' text
let NERDTreeMinimalUI = 1

" VORAX. Jump to the header row of the output window
" can then jump to the next/previous column with ; and ,
nmap <silent> <leader>H gg/^\( \)\?-<CR>kztjf<Space>

nmap <silent> <C-Enter> :VORAXExecCurrent<CR>
imap <silent> <C-Enter> <Esc>:VORAXExecCurrent<CR>

let g:vorax_key_doc_search='<leader>vds'

let g:vorax_output_window_size=20
let g:vorax_dbexplorer_size=30
let g:vorax_cmanager_size=30

let g:vorax_key_describe='<F4>'
let g:vorax_key_describe_verbose='<S-F4>'

" Set VORAX output window to show full headings
let g:vorax_output_full_heading=1

let g:vorax_plsql_associations=
\ {'FUNCTION' : 'fnc',
\  'PROCEDURE' : 'prc',
\  'TRIGGER' : 'trg',
\  'PACKAGE_SPEC' : 'pks',
\  'PACKAGE_BODY' : 'pkb',
\  'PACKAGE' : 'pkg',
\  'TYPE_SPEC' : 'tps',
\  'TYPE_BODY' : 'tpb',
\  'TYPE' : 'typ',
\  'JAVA_SOURCE' : 'jsp'}

" Always start ctrlp from the cwd
let g:ctrlp_working_path_mode='w'
" Keep the cache across sessions
let g:ctrlp_clear_cache_on_exit=0
" Open multiple files in hidden buffers, rather than new splits
let g:ctrlp_open_multiple_files='i'
" Re-order modes. After opening CtrlP, <C-b> now jumps to 'Buffers'
let g:ctrlp_types = ['fil', 'mru', 'buf']

" Make backspace work like expected. See :h 'backspace'
set backspace=indent,eol,start

" remove some gvim clutter
set guioptions-=m "menubar
set guioptions-=r "scrollbar
set guioptions-=T "toolbar
set guioptions-=L "Left-hand scrollbar

if has('win32')
  " start gvim maximized. Simulates pressing Alt+Space x
  autocmd GUIEnter * simalt ~x
  set guifont=Hack:h12
else
  set guifont=Hack\ 15
endif

let g:SuperTabDefaultCompletionType="<c-n>"
let g:SuperTabCrMapping=1

let g:airline_theme='tomorrow'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#tabline#tab_nr_type = 2

let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" Reset some plugin windows to their defined sizes.
let g:plugin_window_types_resize_cmd = {
\ 'nerdtree': 'vertical resize' . g:NERDTreeWinSize,
\ 'connvorax': 'vertical resize' . g:vorax_cmanager_size,
\ 'explorervorax': 'vertical resize' . g:vorax_dbexplorer_size,
\ 'outputvorax': 'resize' . g:vorax_output_window_size,
\ 'tagbar': 'vertical resize' . g:tagbar_width
\ }
function! g:ResizeAllPluginWindows()

  function! s:ResizePluginWindows()
    if has_key(g:plugin_window_types_resize_cmd, &ft)
      :execute g:plugin_window_types_resize_cmd[&ft]
    endif
  endfunction

  let g:resizing_plugin_windows=1
  let currentWindow = winnr()
  :windo call s:ResizePluginWindows()
  :execute currentWindow . 'wincmd w'
  unlet g:resizing_plugin_windows

endfunction

nmap <silent> <leader>r :call g:ResizeAllPluginWindows()<CR>

function! g:CloseBufferAfterSwitch()
  if &mod
    echohl WarningMsg
    echo "Buffer has unsaved changes!"
    echohl None
  else
    let currentBuffer = bufnr('%')
    :bprevious
    :execute 'bd' . currentBuffer
  endif
endfunction

nmap <silent> <leader>wq :call g:CloseBufferAfterSwitch()<CR>

function! g:LoadWorkspace()
  if winnr('$') > 1
    :execute ':only'
  endif
  :execute ':VORAXConnectionsToggle'
  :execute ':NERDTreeToggle'
  :execute ':VORAXOutputToggle'
  :execute "wincmd k"
  :execute "wincmd l"
  :call g:ResizeAllPluginWindows()
endfunction

nmap <silent> <leader>ws :call g:LoadWorkspace()<CR>
