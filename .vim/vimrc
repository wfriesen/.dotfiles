" Has to be set before colorscheme, so that lightline picks up it's own colorscheme setting
let g:lightline = {'colorscheme': 'solarized'}

let g:lsc_server_commands = {
      \ 'python' : 'pyls',
      \ 'java': 'java-language-server'
      \ }

packadd! matchit

autocmd BufNewFile,BufRead Jenkinsfile set filetype=groovy

augroup sql_settings
  au!
  autocmd BufNewFile,BufRead *.vw set filetype=sql

  " Use /*..*/ style comments instead of --
  autocmd FileType sql setlocal commentstring=/\*\ %s\ \*/

augroup END

set mouse=n " Enable mouse. Much easier to click on tabs

set swapfile
set directory=~/.vim/swap//

set scrolloff=0
set showtabline=2 " Always show the tabline

set shortmess-=S " Show search count in command line

" Pretty colors
syntax on
filetype plugin indent on
set background=dark
colorscheme solarized

highlight LineNr guifg=#586e75 ctermfg=10
highlight CursorLineNr guifg=#839496 ctermfg=12
highlight Cursor guibg=#dc322f

if has("gui_running")
  if has('win32')
    set guifont=Consolas:h11
  else
    set guifont=Hack\ 16
  endif

  set guioptions-=m "menubar
  set guioptions-=r "scrollbar
  set guioptions-=T "toolbar
  set guioptions-=L "Left-hand scrollbar
  set guioptions+=c "Use console dialogs for simple choices
  set guioptions-=e
  set guicursor+=a:block " Always use block cursor in GUI mode

endif

set lazyredraw " Execute macros faster by not redrawing the screen constantly

set number
set relativenumber
set cursorline

set noequalalways

set backspace=indent,eol,start " Make backspace work like expected

set hidden " Allow hidden buffers with unsaved changes

" Formatting options
set fileformats=unix,dos
set encoding=utf-8
set tabstop=2
set softtabstop=0
set expandtab
set shiftwidth=2
set shiftround " round indents to multiples of shiftwidth
set smarttab
set autoindent
set nojoinspaces

" Ignore case, except if the entered search pattern contains upper case chars
set ignorecase
set smartcase
set infercase

set hlsearch " Highlight search matches
set incsearch " Search as you type. <Esc> still cancels and returns
set gdefault " Always use /g for :s commands
set virtualedit=block " In visual block mode, allow the cursor to move anywhere
set backupcopy=yes " Let's webpack pick up changes
set showmode " Show the mode in command line. statusline shows it anyway, but it'd just be empty otherwise

set path+=** " Recursive :find

set laststatus=2 " Always show status line

set wildmenu " Show matches when invoking command line completion
set wildmode=full
set wildignorecase " Case insensitive filename matching

" Exclude these folders from ctrlp
set wildignore+=*/node_modules/*
set wildignore+=*/$tf/*
set wildignore+=*/target/*

set sessionoptions-=options " Keeping this on seems to break loading sessions when using plugins

set completeopt=
set completeopt+=menu " Use popup menu, even if there's only one match
set completeopt+=menuone " Show even when there's only one match
set completeopt+=preview " Show some extra info (types, filenames, etc)

set undofile
let &undodir = expand('$HOME/.vim/undo')

let g:netrw_liststyle=1 " Show file size and modification times

" Use space as leader
nnoremap <Space> <Nop>
let mapleader = "\<Space>"

set cedit=<C-l> " Open the command-line window

" Set to defaults, so that later appends in this file won't constantly
" increase it
set viminfo='100,<50,s10,h,rA:,rB:

" Move cursor in command line mode just like in bash and others. C-e and C-k are
" already mapped by default to move to, and delete until, the end of the line
cnoremap <C-a> <Home>
cnoremap <A-b> <C-Left>
cnoremap <A-f> <C-Right>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-k> <C-\>estrpart(getcmdline(),0,getcmdpos()-1)<CR>

" Toggle search highlighting
nmap <silent> <c-_> :set hlsearch!<CR>

" Don't use word boundaries for * and #
nnoremap * g*
nnoremap # g#
" g* and g# for word boundaries
nnoremap g* *
nnoremap g# #

" Jump to quickfix locations
nnoremap ]q :cnext<CR>
nnoremap [q :cprevious<CR>

" Easier searching for things like attribute-names-with-hyphens
autocmd FileType xml setlocal iskeyword+=-

" Make * and # in visual mode work like in normal mode
vnoremap <silent> * "zy/<C-R>z<CR>
vnoremap <silent> # "zy?<C-R>z<CR>

" Shift and Control insensitive mapping
nnoremap <C-w>t <C-w>T
nnoremap <C-w><C-t> <C-w>T

" More intuitive split window mappings
nnoremap <C-w><Bar> <C-w>v
nnoremap <C-w>_ <C-w>s

" Use Alt- for scrolling
if has('gui_running')
  let s:alt_key_prefix="<A-"
  let s:alt_key_suffix=">"
else
  let s:alt_key_prefix=""
  let s:alt_key_suffix=""
endif
execute "nnoremap ".s:alt_key_prefix."l".s:alt_key_suffix." zl"
execute "nnoremap ".s:alt_key_prefix."h".s:alt_key_suffix." zh"
execute "nnoremap ".s:alt_key_prefix."L".s:alt_key_suffix." 100zl"
execute "nnoremap ".s:alt_key_prefix."H".s:alt_key_suffix." 100zh"
execute "nnoremap ".s:alt_key_prefix."j".s:alt_key_suffix." <C-e>"
execute "nnoremap ".s:alt_key_prefix."k".s:alt_key_suffix." <C-y>"
execute "nnoremap ".s:alt_key_prefix."J".s:alt_key_suffix." <C-d>"
execute "nnoremap ".s:alt_key_prefix."K".s:alt_key_suffix." <C-u>"

nmap <silent> <leader>gs :Gstatus<CR>
nmap <silent> <leader>ge :Gedit<CR>
nmap <silent> <leader>gd :tabedit % <Bar> :Gdiff<CR>

" execute docmd in all windows, then return cursor to the original window
function! g:WindoReturn(docmd)
  let l:current_winnr = winnr()
  execute ":windo ".a:docmd
  execute l:current_winnr."wincmd w"
endfunction

" Fold operations on all windows in the current tab page
nnoremap <silent> <leader>zR :call g:WindoReturn(":normal zR")<CR>
nnoremap <silent> <leader>zM :call g:WindoReturn(":normal zM")<CR>
nnoremap <silent> <leader>zr :call g:WindoReturn(":normal zr")<CR>
nnoremap <silent> <leader>zm :call g:WindoReturn(":normal zm")<CR>

nnoremap <silent> <leader>wq :windo q<CR>

nmap <silent> <leader>u :UndotreeToggle<CR>
nmap <silent> <leader>t :TagbarToggle<CR>

let g:yankring_replace_n_pkey = '<leader>y' " Don't clobber the ctrlp mapping
nnoremap <leader>p :YRShow<CR>

let g:undotree_SetFocusWhenToggle=1 " Focus the undotree window when opening

" Move up/down the same way in some plugin windows
function! g:Undotree_CustomMap()
  nmap <buffer> <C-k> <plug>UndotreeGoNextState
  nmap <buffer> <C-j> <plug>UndotreeGoPreviousState
endfunc
autocmd FileType gitcommit nmap <buffer> <C-k> <C-p>
autocmd FileType gitcommit nmap <buffer> <C-j> <C-n>

" start gvim maximized. Simulates pressing Alt+Space x
if has('win32')
  autocmd GUIEnter * simalt ~x
endif

let g:startify_enable_special = 0 " Don't show <empty buffer> and <quit>
let g:startify_session_sort = 1 " Sort sessions by modification time
let g:startify_custom_header = [] " Turn off the cowsay fortune header
let g:startify_session_dir = '~/.vim/session'
let &viminfo = &viminfo . ',n' . expand('~/.vim/.viminfo')

" Show sessions at the top. Pressing CR immediately after starting loads the
" latest session
let g:startify_list_order = [
        \ ['   Sessions'],
        \ 'sessions',
        \ ['   MRU Files'],
        \ 'files',
        \ ['   MRU in CWD'],
        \ 'dir',
        \ ['   Bookmarks'],
        \ 'bookmarks'
        \ ]

" Change order to put variables at the top, since that's usually where they are
" defined anyway
let g:tagbar_type_sql = {
    \ 'kinds' : [
        \ 'P:packages:1',
        \ 'v:variables',
        \ 'd:prototypes',
        \ 'c:cursors',
        \ 'f:functions',
        \ 'F:record fields',
        \ 'L:block label',
        \ 'p:procedures',
        \ 's:subtypes',
        \ 't:tables',
        \ 'T:triggers',
        \ 'i:indexes',
        \ 'e:events',
        \ 'U:publications',
        \ 'R:services',
        \ 'D:domains',
        \ 'V:views',
        \ 'n:synonyms',
        \ 'x:MobiLink Table Scripts',
        \ 'y:MobiLink Conn Scripts',
        \ 'z:MobiLink Properties',
    \ ],
\ }
let g:tagbar_compact=1 " Don't show help, just tags
let g:tagbar_autofocus=1 " Focus tagbar when opening
let g:tagbar_sort=0 " Sort by file position, not alphabetically
let g:tagbar_width=30

let g:AutoPairsCenterLine=0 " Don't do zz after CR

" Map q to quit windows
autocmd FileType help,diff,qf nnoremap <buffer> q <C-w>q

let g:ctrlp_working_path_mode='ra' " Start ctrlp from the VCS root (r). Fallback to directory of current file (a)
let g:ctrlp_clear_cache_on_exit=0 " Keep the cache across sessions
let g:ctrlp_open_multiple_files='t' " Open multiple files in tabs, rather than new splits
let g:ctrlp_types = ['fil', 'mru', 'buf'] " Re-order modes. After opening CtrlP, <C-b> now jumps to 'Buffers'

let g:SuperTabCrMapping=1 " Finish completion with CR
let g:SuperTabClosePreviewOnPopupClose=1

" Use omni-completion when possible
let g:SuperTabDefaultCompletionType="context"
autocmd FileType *
  \ if &omnifunc != '' |
  \   call SuperTabChain(&omnifunc, "<c-p>") |
  \ endif
" Cycle the expected way
let g:SuperTabDefaultCompletionType = "<c-n>"

let g:lightline.active = {
      \ 'left': [
      \   [ 'mode', 'paste', ],
      \   [ 'readonly', 'filename', 'modified' ]
      \ ],
      \ 'right': [
      \   [ 'lineinfo' ],
      \   [ 'percent' ],
      \   [ 'fileformat', 'fileencoding', 'filetype' ]
      \ ]
      \ }
let g:lightline.inactive = {
      \ 'left': [ [ 'filename', 'modified' ] ],
      \ 'right': [ [ 'lineinfo' ],
      \            [ 'percent' ] ] }
let g:lightline.component = {'lineinfo' : 'î‚¡ %3l:%-2v'}
let g:lightline.component_function = {
      \ 'readonly': 'LightlineReadonly',
      \ 'fullfilepath': 'LightlineFullfilepath',
      \ 'filename': 'LightlineFilename'
      \ }
let g:lightline.separator = {'left': 'î‚°', 'right': 'î‚²'}
let g:lightline.subseparator = { 'left': 'î‚±', 'right': 'î‚³'}
let g:lightline.subseparator.tab = {'active': [ 'tabnum', 'filename', 'modified' ]}
let g:lightline.tabline = {
      \ 'left': [ [ 'tabs' ] ],
      \ 'right': [ [ 'fullfilepath', 'modified' ] ]
      \ }
function! LightlineReadonly()
  return &readonly ? 'î‚¢' : ''
endfunction

let g:ctrlp_status_func = {
      \ 'main': 'CtrlPStatusFunc_main',
      \ 'prog': 'CtrlPStatusFunc_prog',
      \ }

function! LightlineFilename()
  if expand('%:t') == 'ControlP'
    return g:lightline.ctrlp_prev . ' ' . g:lightline.subseparator.left . ' ' .
          \ g:lightline.ctrlp_item . ' ' . g:lightline.subseparator.left . ' ' .
          \ g:lightline.ctrlp_next
  else
    return '' != expand('%:t') ? expand('%:t') : '[No Name]'
  endif
endfunction

function! CtrlPStatusFunc_main(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  let g:lightline.ctrlp_marked = a:marked
  return lightline#statusline(0)
endfunction
function! CtrlPStatusFunc_prog(str)
  return lightline#statusline(0)
endfunction
let g:tagbar_status_func = 'TagbarStatusFunc'
function! TagbarStatusFunc(current, sort, fname, ...) abort
  return lightline#statusline(0)
endfunction
function! LightlineFullfilepath()
  return '' != expand('%:.') ? expand('%:.') : '[No Name]'
endfunction

set grepprg=egrep\ -Iinr\ --exclude-dir=.git\ --exclude-dir=.svn\ $*\ /dev/null
function g:MyGrep(args)
  if !isdirectory(split(a:args)[-1]) && !filereadable(expand(split(a:args)[-1], 0, 1)[-1])
    echoerr 'Specify a file/directory/glob as last argument'
  else
    execute 'grep! ' . a:args
    copen
  endif
endfunction
command -nargs=1 -complete=file MyGrep call MyGrep(<f-args>)
nnoremap <leader>F :MyGrep<Space>
